//sumofmatrix................................................................................
#include <stdio.h>
#define row 2
#define col 2

int main()
{
    int matrix1[row][col] , matrix2[row][col] , sum[row][col], i ,j;
    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           printf("Enter 1st matrix [%d][%d]'s element\n",i,j);
           scanf("%d",&matrix1[i][j]);
        }
        
    }

    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           printf("Enter 2st matrix [%d][%d]'s element\n",i,j);
           scanf("%d",&matrix2[i][j]);
        }
        
    }

    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           sum[i][j] = matrix1[i][j] + matrix2[i][j];
        }
        
    }

    printf("the result is :\n");
    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           printf("%d\t", sum[i][j]);
           
        }
        printf("\n");
        
    }

    

    

    return 0;
}



//armstong............................................................
#include<stdio.h>
int main()
{
	int n,digit,sum=0;

	printf("Enter the number");
	scanf("%d",&n);
		int m=n;
	while(m!=0)
	{
		digit=m%10;
		sum=sum+digit*digit*digit;
		m=m/10;
	}
	if(n==sum)
	{
		printf("%d is the armstrong number",n);
	}
	else
	printf("%d is not the armstrong number",n);
	
	return 0;
}


//factorial.................................................
//program to find factorial number
#include<stdio.h>
int main()
{
	int c=1, i ,n;
	printf("Enter the number\n");
	scanf("%d", &n);
	
	for (i=1; i<=n ; i++)
	{
		c= c*i;
	
		
	}
 printf("Factorial of %d is: %d",n,c);    
	
}



//rooots.....................................................
#include<stdio.h>
#include<math.h>

void main()
{
	float a,b,c,x1,x2,d;
	printf("\n Enter the coeffients");
	scanf("%f %f %f",&a,&b,&c);
	
	d=b*b-4*a*c;
	if(d<0)
	{
		printf("\n The roots are imaginary");
	}
	else
	{
		d= sqrt(d);
		x1= (-b+d)/(2*a);
		x2= (-b-d)/(2*a);
		printf("\n x1=%f \n x2=%f",x1,x2);
	}
	
	
}


//transpose...........................................................
#include <stdio.h>
#define row 2
#define col 2

int main()
{
    int matrix1[row][col] , transpose[row][col] ,i ,j;
    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           printf("Enter 1st matrix [%d][%d]'s element\n",i,j);
           scanf("%d",&matrix1[i][j]);
        }
        
    }



    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           transpose[i][j] = matrix1[j][i];
        }
        
    }

    printf("the result is :\n");
    for ( i = 0; i < row; i++)
    {
        for ( j = 0; j < col; j++)
        {
           printf("%d\t", transpose[i][j]);
           
        }
        printf("\n");
        
    }

    

    

    return 0;
}


//fibonachi.................................................................

#include <stdio.h>


int main()
{
  int a=0,b=1,n,i;
  printf("Enter the no of fibonachi terms\n");
  scanf("%d",&n);
  for ( i = 2; i < n; i++)
  {
    printf("%d\t",a);
    printf("%d\t",b);
    a=a+b;
    b =a+b;
  }
  
    return 0;
}

//factorialbyrecursive.................................................................

#include <stdio.h>

int factorial(int n)
{
    if (n == 1)
    {
        return 1;
    }
    return n * factorial(n-1);
    
}

int main()
{
  int n,fact;
  printf("Enter the no of for factorial\n");
  scanf("%d",&n);
  fact =  factorial(n);
  printf("factorial is %d",fact);
  
    return 0;
}


//primecomposite................................................................

//program to check prime number
#include<stdio.h>
void main()
{
int n, i;
printf("n Enter the number n");
scanf("%d",&n);
for(i=2; i<=n/2; i++)
{
if(n%i==0)
{
printf("n %d is composite",n);
exit(0);
}
}
{
printf("%d is prime",n);
}
exit(0);
}


//to demostrate different components of function..........................................................
#include<stdio.h>
void main()
{
int a,b,s;
printf("n Enter the numbers:");
scanf("%d%d",&a, &b);
s=sum(a,b);
printf("The required sum is %d",s);
}
int sum(int x,int y)
{
return x+y;
}





DMA.........................................................................
#include <stdio.h>
#include <stdlib.h>
 
int main()
{
 
    // This pointer will hold the
    // base address of the block created
    int* ptr;
    int n, i;
 
    // Get the number of elements for the array
    printf("Enter number of elements:");
    scanf("%d",&n);
    printf("Entered number of elements: %d\n", n);
 
    // Dynamically allocate memory using malloc()
    ptr = (int*)malloc(n * sizeof(int));
 
    // Check if the memory has been successfully
    // allocated by malloc or not
    if (ptr == NULL) {
        printf("Memory not allocated.\n");
        exit(0);
    }
    else {
 
        // Memory has been successfully allocated
        printf("Memory successfully allocated using malloc.\n");
 
        // Get the elements of the array
        for (i = 0; i < n; ++i) {
            ptr[i] = i + 1;
        }
 
        // Print the elements of the array
        printf("The elements of the array are: ");
        for (i = 0; i < n; ++i) {
            printf("%d, ", ptr[i]);
        }
    }
 
    return 0;
}




//file handaling..............................................................................
#include <stdio.h>
#include <conio.h>
#include <string.h>

typedef struct record
{
    int roll;
    char name[20];
} record;

int main()
{
    FILE *fp;

    // primitive data types
    int i=56;
    float f=45.256;
    double d=12.54863;
    char c='d';

    // array
    int arr[3]= {15,74,29};

    // structure
    record x;
    x.roll=1;
    strcpy(x.name,"Peter");

    fp = fopen("e:/data.txt", "wb");
    if(fp == NULL)
    {
        printf("Cannot open file");
        exit(0) ;
    }

    // writing primitive data types to binary file
    fwrite(&i, sizeof(i), 1, fp);
    fwrite(&f, sizeof(f), 1, fp);
    fwrite(&d, sizeof(d), 1, fp);
    fwrite(&c, sizeof(c), 1, fp);

    // writing an array to binary file
    fwrite(&arr, sizeof(arr), 1, fp);

    // writing a structure to binary file
    fwrite(&x, sizeof(x), 1, fp);

    fclose(fp);
    return 0;
}

file handaling structure............................
#include <stdio.h>

    struct player
    {
        char name[30];
        float height;

    } data[5];


int writerecords(struct player data1[])
{
   FILE *fptr;
   int i;
   fptr = fopen("./player.txt", "w" );
   if (!fptr)
   {
    printf("Error in generating file");
   }
   for ( i = 0; i < 5; i++)
   {
  
   fprintf(fptr,"name:- %s age:- %f\n",data1[i].name,data1[i].height);
   }
   fclose(fptr) ;
   return 0;
}

int main()
{
    int i;


    for ( i = 0; i < 5; i++)
    {
        printf("Enter Name and height of data %d",i+1);
        scanf("%s %f",data[i].name,&data[i].height);
    }

    writerecords(data);


    
    
    return 0;
}


//emplyee file handaling...............................salary logic
#include <stdio.h>
#include <stdlib.h>

struct employee
{
    int id;
    float salary;
} data[100];

int main()
{
    FILE *fptr;
    int i, n;
    fptr = fopen("./employee.bin", "wb");
    if (!fptr)
    {
        printf("Unable to open the file.\n");
        return 1;
    }

    printf("Enter the number of employees: ");
    scanf("%d", &n);

    printf("Enter id and salary:\n");
    for (i = 0; i < n; i++)
    {
        printf("Employee %d:\n", i + 1);
        printf("ID: ");
        scanf("%d", &data[i].id);
        printf("Salary: ");
        scanf("%f", &data[i].salary);
    }

    fwrite(&data, sizeof(struct employee), n, fptr);

    fclose(fptr);

    fptr = fopen("./employee.bin", "rb");
    if (!fptr)
    {
        printf("Unable to open the file.\n");
        return 1;
    }

    fread(&data, sizeof(struct employee), n, fptr);
    for (i = 0; i < n; i++)
    {
        if (data[i].salary >= 4000)
        {
            printf("ID: %d, Salary: %.2f\n", data[i].id, data[i].salary);
        }
    }

    fclose(fptr);
    return 0;
}



//switch case and memu driven.....................................
#include <stdio.h>

void findSum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    printf("Sum of the integers: %d\n", sum);
}

int findMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int findMin(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int main() {
    int n;
    int choice;
    int arr[100];
    printf("Enter the number of integers: ");
    scanf("%d", &n);

    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }



        printf("1. Find sum of the integers\n 2. For Max \n 3. For Min");
    
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                findSum(arr, n);
                break;
            case 2:
                printf("Maximum number: %d\n", findMax(arr, n));
                break;
            case 3:
                printf("Minimum number: %d\n", findMin(arr, n));
                break;
  
            default:
               exit(0);
               break;
        }


    return 0;
}
